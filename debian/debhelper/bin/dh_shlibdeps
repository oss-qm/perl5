#!/usr/bin/perl -w

=head1 NAME

dh_shlibdeps - calculate shared library dependancies

=cut

use strict;
use Cwd;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh_shlibdeps> [S<I<debhelper options>>] [B<-l>I<directory>] [B<-X>I<item>] [S<B<--> I<params>>]

=head1 DESCRIPTION

dh_shlibdeps is a debhelper program that is responsible for calculating
shared library dependancies for packages.

This program is merely a wrapper around L<dpkg-shlibdeps(1)> that calls it
once for each package listed in the control file, passing it
a list of ELF executables and shared libraries it has found.

=head1 OPTIONS

=over 4

=item B<-u>I<params>, B<--dpkg-shlibdeps-params=>I<params>

=item B<--> I<params>

Pass "params" to L<dpkg-shlibdeps(1)>.

=item B<-X>I<item>, B<--exclude=>I<item>

Exclude files that contain "item" anywhere in their filename from being
passed to dpkg-shlibdeps. This will make their dependancies be ignored.
This may be useful in some situations, but use it with caution. This option
may be used more than once to exclude more than one thing.

=item B<-l>I<directory>[:directory:directory:..]

Before dpkg-shlibdeps is run, LD_LIBRARY_PATH will have added to it the 
specified directory (or directories -- separate with colons). This is
useful for multi-binary packages where a library is built in one
package and another package contains binaries linked against said
library. Relative paths will be made absolute for the benefit of
dpkg-shlibdeps.

=back

=cut

init();

# Add directory to library search path.
if ($dh{L_PARAMS}) {
	my @paths=();
	# Add to existing paths, if set.
	push @paths, $ENV{'LD_LIBRARY_PATH'}
		if exists $ENV{'LD_LIBRARY_PATH'};
	foreach (split(/:/, $dh{L_PARAMS})) {
		# Force the path absolute.
		if (m:^/:) {
			push @paths, $_;
		}
		else {
			push @paths, getcwd()."/$_";
		}
	}
	$dh{L_PARAMS}=join(':', @paths);
	$ENV{'LD_LIBRARY_PATH'}=$dh{L_PARAMS};
	verbose_print("LD_LIBRARY_PATH=$dh{L_PARAMS}");
}

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);
	my $ext=pkgext($package);

	my @filelist;
	my $ff;

	# Generate a list of ELF binaries in the package, ignoring any
	# we were told to exclude.
	my $find_options='';
	if (defined($dh{EXCLUDE_FIND}) && $dh{EXCLUDE_FIND} ne '') {
		$find_options="! \\( $dh{EXCLUDE_FIND} \\)";
	}
	foreach my $file (split(/\n/,`find $tmp -type f \\( -perm +111 -or -name "*.so*" \\) $find_options`)) {
		# TODO: this is slow, optimize. Ie, file can run once on multiple files..
		$ff=`file "$file"`;
		if ($ff=~m/ELF/ && $ff!~/statically linked/) {
			push @filelist,$file;
		}
	}

	if (@filelist) {
		doit("dpkg-shlibdeps","-Tdebian/${ext}substvars",@{$dh{U_PARAMS}},'-dDepends',@filelist);
	}
}

=head1 SEE ALSO

L<debhelper(1)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut

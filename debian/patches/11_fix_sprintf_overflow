SECURITY [CVE-2005-3962]:  Upstream fixes to prevent buffer overflows
in printf/sprintf caused by malicious format strings.

diff --exclude=debian -Naur perl-5.8.7.orig/makedef.pl perl-5.8.7/makedef.pl
--- perl-5.8.7.orig/makedef.pl	2005-05-09 23:27:41.000000000 +1000
+++ perl-5.8.7/makedef.pl	2005-12-10 13:17:38.000000000 +1100
@@ -635,12 +635,6 @@
 		    )];
 }
 
-if ($define{'PERL_MALLOC_WRAP'}) {
-    emit_symbols [qw(
-		    PL_memory_wrap
-		    )];
-}
-
 unless ($define{'USE_5005THREADS'} || $define{'USE_ITHREADS'}) {
     skip_symbols [qw(
 		    PL_thr_key
diff --exclude=debian -Naur perl-5.8.7.orig/op.c perl-5.8.7/op.c
--- perl-5.8.7.orig/op.c	2005-04-23 00:12:32.000000000 +1000
+++ perl-5.8.7/op.c	2005-12-10 13:17:38.000000000 +1100
@@ -2076,7 +2076,6 @@
 	/* XXX might want a ck_negate() for this */
 	cUNOPo->op_first->op_private &= ~OPpCONST_STRICT;
 	break;
-    case OP_SPRINTF:
     case OP_UCFIRST:
     case OP_LCFIRST:
     case OP_UC:
diff --exclude=debian -Naur perl-5.8.7.orig/opcode.h perl-5.8.7/opcode.h
--- perl-5.8.7.orig/opcode.h	2005-05-28 02:29:50.000000000 +1000
+++ perl-5.8.7/opcode.h	2005-12-10 13:17:38.000000000 +1100
@@ -1585,7 +1585,7 @@
 	0x0022281c,	/* vec */
 	0x0122291c,	/* index */
 	0x0122291c,	/* rindex */
-	0x0004280f,	/* sprintf */
+	0x0004280d,	/* sprintf */
 	0x00042805,	/* formline */
 	0x0001379e,	/* ord */
 	0x0001378e,	/* chr */
diff --exclude=debian -Naur perl-5.8.7.orig/opcode.pl perl-5.8.7/opcode.pl
--- perl-5.8.7.orig/opcode.pl	2004-12-02 00:54:30.000000000 +1100
+++ perl-5.8.7/opcode.pl	2005-12-10 13:17:38.000000000 +1100
@@ -606,7 +606,7 @@
 index		index			ck_index	isT@	S S S?
 rindex		rindex			ck_index	isT@	S S S?
 
-sprintf		sprintf			ck_fun		mfst@	S L
+sprintf		sprintf			ck_fun		mst@	S L
 formline	formline		ck_fun		ms@	S L
 ord		ord			ck_fun		ifsTu%	S?
 chr		chr			ck_fun		fsTu%	S?
diff --exclude=debian -Naur perl-5.8.7.orig/patchlevel.h perl-5.8.7/patchlevel.h
--- perl-5.8.7.orig/patchlevel.h	2005-05-31 07:32:42.000000000 +1000
+++ perl-5.8.7/patchlevel.h	2005-12-10 13:21:17.000000000 +1100
@@ -120,6 +120,7 @@
 #if !defined(PERL_PATCHLEVEL_H_IMPLICIT) && !defined(LOCAL_PATCH_COUNT)
 static	char	*local_patches[] = {
 	NULL
+	,"SPRINTF0 - fixes for sprintf formatting issues - CVE-2005-3962"
 	,NULL
 };
 
diff --exclude=debian -Naur perl-5.8.7.orig/perl.h perl-5.8.7/perl.h
--- perl-5.8.7.orig/perl.h	2005-05-08 06:11:45.000000000 +1000
+++ perl-5.8.7/perl.h	2005-12-10 13:17:38.000000000 +1100
@@ -3326,10 +3326,8 @@
   INIT("\"my\" variable %s can't be in a package");
 EXTCONST char PL_no_localize_ref[]
   INIT("Can't localize through a reference");
-#ifdef PERL_MALLOC_WRAP
 EXTCONST char PL_memory_wrap[]
   INIT("panic: memory wrap");
-#endif
 
 EXTCONST char PL_uuemap[65]
   INIT("`!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_");
diff --exclude=debian -Naur perl-5.8.7.orig/sv.c perl-5.8.7/sv.c
--- perl-5.8.7.orig/sv.c	2005-05-27 20:38:11.000000000 +1000
+++ perl-5.8.7/sv.c	2005-12-10 13:17:38.000000000 +1100
@@ -8707,9 +8707,15 @@
 
 	if (vectorize)
 	    argsv = vecsv;
-	else if (!args)
-	    argsv = (efix ? efix <= svmax : svix < svmax) ?
-		    svargs[efix ? efix-1 : svix++] : &PL_sv_undef;
+	else if (!args) {
+	    if (efix) {
+		const I32 i = efix-1;
+		argsv = (i >= 0 && i < svmax) ? svargs[i] : &PL_sv_undef;
+	    } else {
+		argsv = (svix >= 0 && svix < svmax)
+		    ? svargs[svix++] : &PL_sv_undef;
+	    }
+	}
 
 	switch (c = *q++) {
 
@@ -8972,6 +8978,8 @@
 		    *--eptr = '0';
 		break;
 	    case 2:
+		if (!uv)
+		    alt = FALSE;
 		do {
 		    dig = uv & 1;
 		    *--eptr = '0' + dig;
@@ -9274,6 +9282,8 @@
 
 	/* calculate width before utf8_upgrade changes it */
 	have = esignlen + zeros + elen;
+	if (have < zeros)
+	    Perl_croak_nocontext(PL_memory_wrap);
 
 	if (is_utf8 != has_utf8) {
 	     if (is_utf8) {
@@ -9301,6 +9311,8 @@
 	need = (have > width ? have : width);
 	gap = need - have;
 
+	if (need >= (((STRLEN)~0) - SvCUR(sv) - dotstrlen - 1))
+	    Perl_croak_nocontext(PL_memory_wrap);
 	SvGROW(sv, SvCUR(sv) + need + dotstrlen + 1);
 	p = SvEND(sv);
 	if (esignlen && fill == '0') {
diff --exclude=debian -Naur perl-5.8.7.orig/t/lib/warnings/sv perl-5.8.7/t/lib/warnings/sv
--- perl-5.8.7.orig/t/lib/warnings/sv	2004-03-18 23:51:14.000000000 +1100
+++ perl-5.8.7/t/lib/warnings/sv	2005-12-10 13:17:38.000000000 +1100
@@ -301,12 +301,12 @@
 printf F "%\x02" ;
 $a = sprintf "%\x02" ;
 EXPECT
-Invalid conversion in sprintf: "%z" at - line 5.
-Invalid conversion in sprintf: end of string at - line 7.
-Invalid conversion in sprintf: "%\002" at - line 9.
 Invalid conversion in printf: "%z" at - line 4.
+Invalid conversion in sprintf: "%z" at - line 5.
 Invalid conversion in printf: end of string at - line 6.
+Invalid conversion in sprintf: end of string at - line 7.
 Invalid conversion in printf: "%\002" at - line 8.
+Invalid conversion in sprintf: "%\002" at - line 9.
 ########
 # sv.c
 use warnings 'misc' ;
diff --exclude=debian -Naur perl-5.8.7.orig/t/op/sprintf.t perl-5.8.7/t/op/sprintf.t
--- perl-5.8.7.orig/t/op/sprintf.t	2003-09-01 17:41:07.000000000 +1000
+++ perl-5.8.7/t/op/sprintf.t	2005-12-10 13:17:38.000000000 +1100
@@ -385,3 +385,6 @@
 >%4$K %d<	>[45, 67]<	>%4$K 45 INVALID<
 >%d %K %d<	>[23, 45]<	>23 %K 45 INVALID<
 >%*v*999\$d %d %d<	>[11, 22, 33]<	>%*v*999\$d 11 22 INVALID<
+>%#b<		>0<	>0<
+>%#o<		>0<	>0<
+>%#x<		>0<	>0<
diff --exclude=debian -Naur perl-5.8.7.orig/t/op/sprintf2.t perl-5.8.7/t/op/sprintf2.t
--- perl-5.8.7.orig/t/op/sprintf2.t	2004-02-10 08:37:13.000000000 +1100
+++ perl-5.8.7/t/op/sprintf2.t	2005-12-10 13:17:38.000000000 +1100
@@ -6,7 +6,7 @@
     require './test.pl';
 }   
 
-plan tests => 3;
+plan tests => 7;
 
 is(
     sprintf("%.40g ",0.01),
@@ -26,3 +26,31 @@
 		q(width calculation under utf8 upgrade)
 	);
 }
+
+# Used to mangle PL_sv_undef
+fresh_perl_is(
+    'print sprintf "xxx%n\n"; print undef',
+    'Modification of a read-only value attempted at - line 1.',
+    { switches => [ '-w' ] },
+    q(%n should not be able to modify read-only constants),
+);
+
+# check %NNN$ for range bounds, especially negative 2's complement
+
+{
+    my ($warn, $bad) = (0,0);
+    local $SIG{__WARN__} = sub {
+	if ($_[0] =~ /uninitialized/) {
+	    $warn++
+	}
+	else {
+	    $bad++
+	}
+    };
+    my $result = sprintf join('', map("%$_\$s%" . ~$_ . '$s', 1..20)),
+	qw(a b c d);
+    is($result, "abcd", "only four valid values");
+    is($warn, 36, "expected warnings");
+    is($bad,   0, "unexpected warnings");
+}
+

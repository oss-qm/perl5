From 37e1d254f182b592097c22fa1be676ac01b33467 Mon Sep 17 00:00:00 2001
From: David Mitchell <davem@iabyn.com>
Date: Mon, 11 Jan 2010 21:42:07 +0000
Subject: fix unwanted taint laundering in lc(), uc() et al.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Bug-Debian: http://bugs.debian.org/622817
Bug: http://rt.perl.org/rt3/Public/Bug/Display.html?id=87336
Origin: upstream, http://perl5.git.perl.org/perl.git/commitdiff/539689e74a3bcb04d29e4cd9396de91a81045b99

Upstream patch ported to 5.12 by Marcela Mašláňová <mmaslano@redhat.com>

Tests modified by Niko Tyni <ntyni@debian.org> to actually fail without
the patch.


Patch-Name: fixes/casing-taint-cve-2011-1487.diff
---
 pp.c         |    7 ++++++-
 t/op/taint.t |   15 ++++++++++++++-
 2 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/pp.c b/pp.c
index 09d0366..098e58c 100644
--- a/pp.c
+++ b/pp.c
@@ -3949,6 +3949,8 @@ PP(pp_ucfirst)
 	    SvCUR_set(dest, need - 1);
 	}
     }
+    if (dest != source && SvTAINTED(source))
+        SvTAINT(dest);
     SvSETMAGIC(dest);
     RETURN;
 }
@@ -4008,7 +4010,8 @@ PP(pp_uc)
 	SvUPGRADE(dest, SVt_PV);
 	d = (U8*)SvGROW(dest, min);
 	(void)SvPOK_only(dest);
-
+	if (dest != source && SvTAINTED(source))
+	    SvTAINT(dest);
 	SETs(dest);
     }
 
@@ -4433,6 +4436,8 @@ PP(pp_lc)
 	    SvCUR_set(dest, d - (U8*)SvPVX_const(dest));
 	}
     }
+    if (dest != source && SvTAINTED(source))
+        SvTAINT(dest);
     SvSETMAGIC(dest);
     RETURN;
 }
diff --git a/t/op/taint.t b/t/op/taint.t
index 161073d..fffd5da 100755
--- a/t/op/taint.t
+++ b/t/op/taint.t
@@ -17,7 +17,7 @@ use Config;
 use File::Spec::Functions;
 
 BEGIN { require './test.pl'; }
-plan tests => 302;
+plan tests => 306;
 
 $| = 1;
 
@@ -1319,6 +1319,19 @@ foreach my $ord (78, 163, 256) {
 }
 
 
+{
+    # [perl #87336] lc/uc(first) failing to taint the returned string
+    my $source = "foo$TAINT";
+    my $dest = lc $source;
+    test tainted $dest, "lc(tainted) taints its return value";
+    $dest = lcfirst $source;
+    test tainted $dest, "lcfirst(tainted) taints its return value";
+    $dest = uc $source;
+    test tainted $dest, "uc(tainted) taints its return value";
+    $dest = ucfirst $source;
+    test tainted $dest, "ucfirst(tainted) taints its return value";
+}
+
 # This may bomb out with the alarm signal so keep it last
 SKIP: {
     skip "No alarm()"  unless $Config{d_alarm};

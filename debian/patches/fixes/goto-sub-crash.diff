From 4cd392e168d2f4b309ae5d07ff1e78b83e6e086c Mon Sep 17 00:00:00 2001
From: Father Chrysostomos <sprout@cpan.org>
Date: Sat, 18 Jan 2014 19:16:55 -0800
Subject: Stop undef *_, goto &sub from crashing
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Commit 049bd5ffd62b fixed problems with the wrong @_ being visible
after *_ modification followed by goto.  In so doing, it made it
possible for a null to be placed at the start of the target sub’s
pad, because it was not checking that the array it got from PL_defgv
was actually non-null.  Simply adding the check makes everything work.

Bug: https://rt.perl.org/Public/Bug/Display.html?id=119949
Bug-Debian: http://bugs.debian.org/736187
Origin: upstream, http://perl5.git.perl.org/perl.git/commitdiff/bfa371b
Patch-Name: fixes/goto-sub-crash.diff

Patch backported for 5.18.3 by Niko Tyni <ntyni@debian.org>.
---
 pp_ctl.c    |  6 ++++--
 t/op/goto.t | 19 ++++++++++++++++++-
 2 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/pp_ctl.c b/pp_ctl.c
index c8735e9..19d172e 100644
--- a/pp_ctl.c
+++ b/pp_ctl.c
@@ -2956,8 +2956,10 @@ PP(pp_goto)
 		       to freed memory as the result of undef *_.  So put
 		       it in the callee’s pad, donating our refer-
 		       ence count. */
-		    SvREFCNT_dec(PAD_SVl(0));
-		    PAD_SVl(0) = (SV *)(cx->blk_sub.argarray = arg);
+		    if (arg) {
+			SvREFCNT_dec(PAD_SVl(0));
+			PAD_SVl(0) = (SV *)(cx->blk_sub.argarray = arg);
+		    }
 
 		    /* GvAV(PL_defgv) might have been modified on scope
 		       exit, so restore it. */
diff --git a/t/op/goto.t b/t/op/goto.t
index 37b69e3..a2d9df8 100644
--- a/t/op/goto.t
+++ b/t/op/goto.t
@@ -10,7 +10,7 @@ BEGIN {
 
 use warnings;
 use strict;
-plan tests => 89;
+plan tests => 91;
 our $TODO;
 
 my $deprecated = 0;
@@ -482,6 +482,23 @@ sub { *__ = \@_;  goto &null } -> ("rough and tubbery");
 is ${*__}[0], 'rough and tubbery', 'goto &foo leaves reified @_ alone';
 
 
+# goto &perlsub when @_ itself does not exist [perl #119949]
+# This was only crashing when the replaced sub call had an argument list.
+# (I.e., &{ sub { goto ... } } did not crash.)
+sub {
+    undef *_;
+    goto sub {
+	is *_{ARRAY}, undef, 'goto &perlsub when @_ does not exist';
+    }
+}->();
+sub {
+    local *_;
+    goto sub {
+	is *_{ARRAY}, undef, 'goto &sub when @_ does not exist (local *_)';
+    }
+}->();
+
+
 # [perl #36521] goto &foo in warn handler could defeat recursion avoider
 
 {

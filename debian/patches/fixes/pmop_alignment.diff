From 03b3ed5ef3a4d01213d345e943ff3dc10f6e992e Mon Sep 17 00:00:00 2001
From: Nicholas Clark <nick@ccl4.org>
Date: Thu, 23 May 2013 13:46:05 +0200
Subject: Ensure that the IV in struct pmop (for ithreads) is aligned
 properly.

The members of struct pmop vary between ithreads and non-ithreads builds.
For ithreads, an IV is used for op_pmoffset. For 32 bit platforms built
with -Duse64bitint, IVs are 64 bits, but pointers (and all other members of
all OP structures) are 32 bits, hence on 32 bit platforms OP structure sizes
can be an odd multiple of 4 bytes. Since the swap to the slab allocator,
this is causing problems on architectures where 8 byte IVs have to be 8
byte aligned, notably sparcs. The long-term fix is to replace the IV with
an appropriate 32 bit type, as it is being used for an array index. However,
for maint-5.18 we need a work around which doesn't change the public headers
and ideally doesn't impose a large speed or memory penalty.

Hence for now, simply avoid using the slab allocator when allocating a
struct pmop. Only do this for 32 bit platforms build with 8 byte IVs and
ithreads.

This is the interim fix for RT #118055.

Adjusted to apply to 5.18 by Dominic Hargreaves (without the perldelta
change).

Bug: https://rt.perl.org/rt3/Public/Bug/Display.html?id=118055
Bug-Debian: http://bugs.debian.org/708792
Origin: http://perl5.git.perl.org/perl.git/commit/c2a50ddb1bed657609ef5e85c7ac5c0bfcaa2c
9a

Patch-Name: fixes/pmop_alignment.diff
---
 op.c |   13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/op.c b/op.c
index 8457869..59546eb 100644
--- a/op.c
+++ b/op.c
@@ -169,6 +169,19 @@ Perl_Slab_Alloc(pTHX_ size_t sz)
      || (CvSTART(PL_compcv) && !CvSLABBED(PL_compcv)))
 	return PerlMemShared_calloc(1, sz);
 
+#if defined(USE_ITHREADS) && IVSIZE > U32SIZE
+    /* Work around a goof with alignment on our part. For sparc32 (and
+       possibly other architectures), if built with -Duse64bitint, the IV
+       op_pmoffset in struct pmop should be 8 byte aligned, but the slab
+       allocator is only providing 4 byte alignment. The real fix is to change
+       the IV to a type the same size as a pointer, such as size_t, but we
+       can't do that without breaking the ABI, which is a no-no in a maint
+       release. So instead, simply allocate struct pmop directly, which will be
+       suitably aligned:  */
+    if (sz == sizeof(struct pmop))
+       return PerlMemShared_calloc(1, sz);
+#endif
+
     if (!CvSTART(PL_compcv)) { /* sneak it in here */
 	CvSTART(PL_compcv) =
 	    (OP *)(slab = S_new_slab(aTHX_ PERL_SLAB_SIZE));

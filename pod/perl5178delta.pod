=encoding utf8

=head1 NAME

perl5178delta - what is new for perl v5.17.8

=head1 DESCRIPTION

This document describes differences between the 5.17.7 release and the 5.17.8
release.

If you are upgrading from an earlier release such as 5.17.6, first read
L<perl5177delta>, which describes differences between 5.17.6 and 5.17.7.

=head1 Core Enhancements

=head2 Regular Expression Set Operations

This is an experimental feature to allow matching against the union,
intersection, etc., of sets of code points, similar to
L<Unicode::Regex::Set>.  It can also be used to extend C</x> processing
to [bracketed] character classes, and as a replacement of user-defined
properties, allowing more complex expressions than they do.  See
L<perlre/(?[ ])>.

=head1 Deprecations

=head2 Deprecated modules

The Pod::LaTeX module is now deprecated, and due to be moved out of the Perl
core in 5.20.  Until then, using the core-installed version will produce a
warning.  You can suppress the warning by installing the module from CPAN.

=head2 User-defined charnames with surprising whitespace

A user-defined character name with trailing or multiple spaces in a row is
likely a typo.  This now generates a warning when defined, on the assumption
that uses of it will be unlikely to include the excess whitespace.

=head2 Various XS-callable functions are now deprecated

All the functions used to classify characters will be removed from a
future version of Perl, and should not be used.  With participating C
compilers (e.g., gcc), compiling any file that uses any of these will
generate a warning.  These were not intended for public use; there are
equivalent, faster, macros for most of them.
See L<perlapi/Character classes>.  The complete list (including some
that were deprecated in 5.17.7) is:
C<is_uni_alnum>, C<is_uni_alnumc>, C<is_uni_alnumc_lc>,
C<is_uni_alnum_lc>, C<is_uni_alpha>, C<is_uni_alpha_lc>,
C<is_uni_ascii>, C<is_uni_ascii_lc>, C<is_uni_blank>,
C<is_uni_blank_lc>, C<is_uni_cntrl>, C<is_uni_cntrl_lc>,
C<is_uni_digit>, C<is_uni_digit_lc>, C<is_uni_graph>,
C<is_uni_graph_lc>, C<is_uni_idfirst>, C<is_uni_idfirst_lc>,
C<is_uni_lower>, C<is_uni_lower_lc>, C<is_uni_print>,
C<is_uni_print_lc>, C<is_uni_punct>, C<is_uni_punct_lc>,
C<is_uni_space>, C<is_uni_space_lc>, C<is_uni_upper>,
C<is_uni_upper_lc>, C<is_uni_xdigit>, C<is_uni_xdigit_lc>,
C<is_utf8_alnum>, C<is_utf8_alnumc>, C<is_utf8_alpha>,
C<is_utf8_ascii>, C<is_utf8_blank>, C<is_utf8_char>,
C<is_utf8_cntrl>, C<is_utf8_digit>, C<is_utf8_graph>,
C<is_utf8_idcont>, C<is_utf8_idfirst>, C<is_utf8_lower>,
C<is_utf8_mark>, C<is_utf8_perl_space>, C<is_utf8_perl_word>,
C<is_utf8_posix_digit>, C<is_utf8_print>, C<is_utf8_punct>,
C<is_utf8_space>, C<is_utf8_upper>, C<is_utf8_xdigit>,
C<is_utf8_xidcont>, C<is_utf8_xidfirst>.

In addition these three functions that have never worked properly are
deprecated:
C<to_uni_lower_lc>, C<to_uni_title_lc>, and C<to_uni_upper_lc>.

=head2 Certain rare uses of backslashes within regexes are now deprectated

There are three pairs of characters that Perl recognizes as
metacharacters in regular expression patterns: C<{}>, C<[]>, and C<()>.
These can be used as well to delimit patterns, as in:

 m{foo}
 s(foo)(bar)

Since they are metacharacters, they have special meaning to regular
expression patterns, and it turns out that you can't turn off that
special meaning by the normal means of preceding them with a backslash,
if you use them, paired, within a pattern delimitted by them.  For
example, in

 m{foo\{1,3\}}

the backslashes do not change the behavior, and this matches
S<C<"f o">> followed by one to three more occurrences of C<"o">.

Usages like this, where they are interpreted as metacharacters, are
exceedingly rare; we think there are none, for example, in all of CPAN.
Hence, this deprecation should affect very little code.  It does give
notice, however, that any such code needs to change, which will in turn
allow us to change the behavior in future Perl versions so that the
backslashes do have an effect, and without fear that we are silently
breaking any existing code.

=head1 Modules and Pragmata

=head2 Selected Updates to Modules and Pragmata

=over 4

=item *

Several modules have had their version number changed to one with no
underscore, since such version numbers are usually interpreted to mean
"development-only version".  No other changes have been made in these cases.
The affected modules are:

=over 4

=item *

L<I18N::Langinfo> was 0.08_02 and is now 0.09

=item *

L<I18N::LangTags::List> was 0.35_01 and is now 0.39

=item *

L<IO> was 1.25_08 and is now 1.26

=item *

L<Safe> was 2.33_01 and is now 2.34

=item *

L<Test> was 1.25_02 and is now 1.26.

=back

=item *

L<Digest::SHA> has been upgraded from version 5.80 to 5.81.  This fixes a
double-free bug, which might have caused vulnerabilities in some cases.

=item *

L<Module::CoreList> has been upgraded from 2.79 to 2.80.

=item *

L<Socket> has been upgraded from 2.006_001 to 2.009.  This fixes an
uninitialized memory read.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Warnings

=over 4

=item *

L<'%s' resolved to '\o{%s}%d'|perldiag/"'%s' resolved to '\o{%s}%d'">

=item *

L<'Trailing white-space in a charnames alias definition is deprecated'|perldiag/"Trailing white-space in a charnames alias definition is deprecated">

=item *

L<'A sequence of multiple spaces in a charnames alias definition is deprecated'|perldiag/"A sequence of multiple spaces in a charnames alias definition is deprecated">

=item *

L<'Passing malformed UTF-8 to "%s" is deprecated'|perldiag/"Passing malformed UTF-8 to "%s" is deprecated">

=back

=head1 Testing

=over 4

=item *

Many more of the core's tests now have descriptions.

=item *

Thread stress-tests now adapt to the speed of the machine running the tests,
thus reducing the incidence of false failures.

=back

=head1 Platform Support

=head2 Discontinued Platforms

=over 4

=item Rhapsody

Support for Rhapsody has been removed.

=back

=head2 Platform-Specific Notes

=over 4

=item Windows

Perl can now be built using Microsoft's Visual C++ 2012 compiler by specifying
CCTYPE=MSVC110 (or MSVC110FREE if you are using the free Express edition for
Windows Desktop) in F<win32/Makefile>.

=item Haiku

Perl should now work out of the box on Haiku R1 Alpha 4.

=back

=head1 Internal Changes

=over 4

=item *

A synonym for the misleadingly named C<av_len()> has been created:
C<av_top()>.  Both of these return the number of the highest index in
the array, not the number of elements it contains.

=back

=head1 Selected Bug Fixes

=over 4

=item *

A bug in the core typemap caused any C types that map to the T_BOOL core
typemap entry to not be set, updated, or modified when the T_BOOL variable was
used in an OUTPUT: section with an exception for RETVAL. T_BOOL in an INPUT:
section was not affected. Using a T_BOOL return type for an XSUB (RETVAL)
was not affected. A side effect of fixing this bug is, if a T_BOOL is specified
in the OUTPUT: section (which previous did nothing to the SV), and a read only
SV (literal) is passed to the XSUB, croaks like "Modification of a read-only
value attempted" will happen. [perl #115796]

=item *

On many platforms, providing a directory name as the script name caused perl
to do nothing and report success.  It should now universally report an error
and exit nonzero. [perl #61362]

=back

=head1 Known Problems

=over 4

=item *

Perl 5.17.7 introduced a new internal copy-on-write mechanism, in the
interests of speed.  An flaw in the implementation means that some regexp
matches which previously completed very fast, without invoking the full
regexp engine, now run much slower than before.  We expect this performance
problem to be resolved before 5.18.0 is released.

=item *

The C<POSIX> module may yield test failures when building on a ZFS
filesystem under FreeBSD.

=back

=head1 Acknowledgements

Perl 5.17.8 represents approximately 5 weeks of development since Perl 5.17.7
and contains approximately 18,000 lines of changes across 280 files from 24
authors.

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.17.8:

Aaron Crane, Andy Dougherty, Augustina Blair, Chris 'BinGOs' Williams, Craig
A. Berry, Daniel Dragan, Dave Rolsky, David Mitchell, Eric Brine, Father
Chrysostomos, H.Merijn Brand, James E Keenan, Jerry D. Hedden, Jesse Luehrs,
Karl Williamson, Matthew Horsfall, Nicholas Clark, Renee Baecker, Ricardo
Signes, Shlomi Fish, Steffen MÃ¼ller, Steve Hay, Steven Schubiger, Tony Cook.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
http://rt.perl.org/perlbug/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut

?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1999 Jarkko Hietaniemi
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?MAKE:d_statfs3: \
	d_statfs Compile rm_try cat i_sysparam i_sysmount i_systypes \
	i_sysvfs i_sysstatfs Setvar
?MAKE:	-pick add $@ %<
?S:d_statfs3:
?S:	This variable conditionally defines the HAS_STATFS symbol, which
?S:	indicates to the C program that the statfs() has four arguments.
?S:.
?C:HAS_STATFS3:
?C:	This symbol, if defined, indicates that the statfs routine
?C:	has four arguments, not two.
?C:.
?H:#$d_statfs3 HAS_STATFS3		/**/
?H:.
?LINT:set d_statfs3
: Check for statfs3
case "$d_statfs" in
define)
	$cat >try.h <<EOCP
#define HAS_SYS_TYPES  $i_systypes
#define HAS_SYS_PARAM  $i_sysparam
#define HAS_SYS_MOUNT  $i_sysmount
#define HAS_SYS_VFS    $i_sysvfs
#define HAS_SYS_STATFS $i_sysstatfs
#ifdef HAS_SYS_TYPES
#   include <sys/types.h>
#endif
#ifdef HAS_SYS_PARAM
#   include <sys/param.h>
#endif
#ifdef HAS_SYS_MOUNT
#   include <sys/mount.h>
#endif
#ifdef HAS_SYS_VFS
#   include <sys/vfs.h>
#endif
#ifdef HAS_SYS_STATFS
#   include <sys/statfs.h>
#endif
EOCP
	echo "Checking to see if your statfs can handle three arguments..." >&4
	$cat >try.c <<EOCP
#include "try.h"
int main() { struct statfs sf; statfs(".", &sf, sizeof(sf)) };
EOCP
	set try
	if eval $compile; then
		val="$define"
	else
		val="$undef"
	fi
	case "$val" in
	$define) echo "Yes, it can."  ;;
	$undef)  echo "No, it can't." ;;
	$rm_try
	esac
	;;
*)	val="$undef"
	;;
esac
set d_statfs3
eval $setvar


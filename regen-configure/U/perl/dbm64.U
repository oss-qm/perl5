?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1998 Jarkko Hietaniemi
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?MAKE:d_dbminit64 d_dbmclose64 d_fetch64 d_store64 d_delete64 \
	d_firstkey64 d_nextkey64: Inlibc use64bitint Setvar test
?MAKE:	-pick add $@ %<
?S:d_dbminit64:
?S:	This variable conditionally defines the HAS_DBMINIT64 symbol, which
?S:	indicates to the C program that the dbminit64() routine is available.
?S:.
?S:d_dbmclose64:
?S:	This variable conditionally defines the HAS_DBMCLOSE64 symbol, which
?S:	indicates to the C program that the dbmclose64() routine is available.
?S:.
?S:d_fetch64:
?S:	This variable conditionally defines the HAS_FETCH64 symbol, which
?S:	indicates to the C program that the fetch64() routine is available.
?S:.
?S:d_delete64:
?S:	This variable conditionally defines the HAS_DELETE64 symbol, which
?S:	indicates to the C program that the delete64() routine is available.
?S:.
?S:d_store64:
?S:	This variable conditionally defines the HAS_STORE64 symbol, which
?S:	indicates to the C program that the store64() routine is available.
?S:.
?S:d_firstkey64:
?S:	This variable conditionally defines the HAS_FIRSTKEY64 symbol, which
?S:	indicates to the C program that the firstkey64() routine is available.
?S:.
?S:d_nextkey64:
?S:	This variable conditionally defines the HAS_NEXTKEY64 symbol, which
?S:	indicates to the C program that the nextkey64() routine is available.
?S:.
?C:HAS_DBMINIT64:
?C:	This symbol, if defined, indicates that the dbminit64 routine is
?C:	available to open dbm files larger than 2 gigabytes.
?C:.
?C:HAS_DBMCLOSE64:
?C:	This symbol, if defined, indicates that the dbmclose64 routine is
?C:	available to close dbm files larger than 2 gigabytes.
?C:.
?C:HAS_FETCH64:
?C:	This symbol, if defined, indicates that the fetch64 routine is
?C:	available to fetch from dbm files larger than 2 gigabytes.
?C:.
?C:HAS_STORE64:
?C:	This symbol, if defined, indicates that the store64 routine is
?C:	available to store to dbm files larger than 2 gigabytes.
?C:.
?C:HAS_DELETE64:
?C:	This symbol, if defined, indicates that the delete64 routine is
?C:	available to delete from dbm files larger than 2 gigabytes.
?C:.
?C:HAS_FIRSTKEY64:
?C:	This symbol, if defined, indicates that the firstkey64 routine is
?C:	available to firstkey in dbm files larger than 2 gigabytes.
?C:.
?C:HAS_NEXTKEY64:
?C:	This symbol, if defined, indicates that the nextkey64 routine is
?C:	available to nextkey in dbm files larger than 2 gigabytes.
?C:.
?H:#$d_dbminit64   HAS_DBMINIT64	/**/
?H:#$d_dbmclose64  HAS_DBMCLOSE64	/**/
?H:#$d_fetch64     HAS_FETCH64		/**/
?H:#$d_store64     HAS_STORE64		/**/
?H:#$d_delete64    HAS_DELETE64		/**/
?H:#$d_firstkey64  HAS_FIRSTKEY64	/**/
?H:#$d_nextkey64   HAS_NEXTKEY64	/**/
?H:.
?T:xxx
?LINT:set d_dbminit64
?LINT:set d_dbmclose64
?LINT:set d_fetch64
?LINT:set d_store64
?LINT:set d_delete64
?LINT:set d_firstkey64
?LINT:set d_nextkey64
: Check if DBM has 64bit functions
if $test X"$use64bitint" = X"$define"; then
	: see if dbminit64 exists
	set dbminit64 d_dbminit64
	eval $inlibc

	: see if dbmclose64 exists
	set dbmclose64 d_dbmclose64
	eval $inlibc

	: see if fetch64 exists
	set fetch64 d_fetch64
	eval $inlibc

	: see if store64 exists
	set store64 d_store64
	eval $inlibc

	: see if delete64 exists
	set delete64 d_delete64
	eval $inlibc

	: see if firstkey64 exists
	set firstkey64 d_firstkey64
	eval $inlibc

	: see if nextkey64 exists
	set nextkey64 d_nextkey64
	eval $inlibc
else
	val="$undef"
	for xxx in d_dbminit64 d_dbmclose64 d_fetch64 d_store64 d_delete64 d_firstkey64 d_nextkey64
	do
		set $xxx
		eval $setvar
	done
fi


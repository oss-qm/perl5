?RCS: $Id: oldarchlib.U,v $
?RCS:
?RCS: Copyright (c) 1996-1998, Andy Dougherty
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?MAKE:d_oldarchlib oldarchlib oldarchlibexp : archname privlib \
	archlib sitearch Getfile test Setvar Prefixit
?MAKE:	-pick add $@ %<
?Y:TOP
?S:d_oldarchlib:
?S:	This variable conditionally defines OLDARCHLIB to hold the pathname
?S:	of architecture-dependent library files for a previous
?S:	version of $package.
?S:.
?S:oldarchlib:
?S:	This variable holds the name of the directory in which perl5.000
?S:	and perl5.001 stored
?S:	architecture-dependent public library files.
?S:.
?S:oldarchlibexp:
?S:	This variable is the same as the oldarchlib variable, but is
?S:	filename expanded at configuration time, for convenient use.
?S:.
?C:OLDARCHLIB:
?C:	This variable, if defined, holds the name of the directory in
?C:	which the user has perl5.000 or perl5.001 architecture-dependent
?C:	public library files for $package.  For the most part, these
?C:	files will work with 5.002 (and later), but that is not
?C:	guaranteed.
?C:.
?C:OLDARCHLIB_EXP:
?C:	This symbol contains the ~name expanded version of OLDARCHLIB, to be
?C:	used in programs that are not prepared to deal with ~ expansion at
?C:	run-time.
?C:.
?H:#$d_oldarchlib OLDARCHLIB "$oldarchlib"		/**/
?H:#$d_oldarchlib OLDARCHLIB_EXP "$oldarchlibexp"		/**/
?H:.
?LINT:set d_oldarchlib
: determine where old public architecture dependent libraries might be
case "$oldarchlib" in
'')	case "$privlib" in
	'') ;;
	*)	dflt="$privlib/$archname"
		;;
	esac
	;;
*)	dflt="$oldarchlib"
	;;
esac
if $test ! -d "$dflt/auto"; then
	dflt=none
fi
cat <<EOM

In 5.001, Perl stored architecture-dependent library files in a directory
with a name such as $privlib/$archname,
and this directory contained files from the standard extensions and
files from any additional extensions you might have added.  Starting
with version 5.002, all the architecture-dependent standard extensions
will go into a version-specific directory such as
$archlib,
while locally-added extensions will go into
$sitearch.

If you wish Perl to continue to search the old architecture-dependent
library for your local extensions, give the path to that directory.
If you do not wish to use your old architecture-dependent library
files, answer 'none'.

EOM
fn=dn~
rp='Directory for your old 5.001 architecture-dependent libraries?'
. ./getfile
oldarchlib="$ans"
oldarchlibexp="$ansexp"
case "$oldarchlib" in
''|' ') val="$undef" ;;
*) val="$define" ;;
esac
set d_oldarchlib
eval $setvar

